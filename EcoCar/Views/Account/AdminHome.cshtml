@model EcoCar.ViewModels.AccountViewModel

@{
    Layout = "/Views/Shared/LayoutAdmin.cshtml";
    ViewBag.Title = "Tableau de bord administrateur";
}

<div class="container-fluid bg-grey">

    <div class="row text-center">

        <div class="col-lg-3 col-sm-6 mb-5 mb-lg-0">
            <center><span class="glyphicon glyphicon-user logo-small"></span></center>
            <div class="js-counter h3 mb-1">@Model.Users.Count()</div>
            <span class="text-success">EcoMembres</span>
        </div>

        <div class="col-lg-3 col-sm-6 mb-5 mb-lg-0">
            <center><span class="glyphicon glyphicon-tree-deciduous logo-small"></span></center>
            <div id="service" class="js-counter h3 mb-1">@Model.Services.Where(s=>s.IsRequest==false).Count()</div>
            <span class="text-success">Propositions de Prestations</span>
        </div>

        <div class="col-lg-3 col-sm-6 mb-5 mb-lg-0">
            <center><span class="glyphicon glyphicon-tree-conifer logo-small"></span></center>
            <div id="request" class="js-counter h3 mb-1">@Model.Services.Where(s=>s.IsRequest==true).Count()</div>
            <span class="text-success">Demandes de Prestations</span>
        </div>

        <div class="col-lg-3 col-sm-6 mb-5 mb-lg-0">
            <center><span class="glyphicon glyphicon-shopping-cart logo-small"></span></center>
            <div id="ecostore" class="js-counter h3 mb-1">@Model.EcoStoreInvoices.Count()</div>
            <span class="text-success">EcoAchats</span>
        </div>
    </div>

</div>

<br />


<div class="container-fluid bg-grey">
    @*Users List Display*@
    <div class="table-responsive">
        <p style="float:left;font-variant:small-caps;font-weight:bold;font-size:larger">Utilisateurs</p><input style="width:50%;float:right" type="text" id="searchUserInput" onkeyup="myFunctionUser()" placeholder="Rechercher un utilisateur">
        <br />
        <br />
        <table class="table" id="userTable">
            <thead>

                <tr class="header">
                    <th>Nom d'utilisateur</th>
                    <th>Nom</th>
                    <th>Prénom</th>
                    <th>EcoStatus</th>
                    <th>Email</th>
                    <th>EcoMembre depuis</th>
                    <th>Montant EcoCoins</th>
                    <th>Abonnement</th>
                    <th>Actif</th>
                    <th>EcoSuspension</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var users in Model.Users)
                {
                    <tr>
                        <td><a href="/account/userprofile/@users.Id">@users.Account.Username</a></td>
                        <td>@users.Person.LastName</td>
                        <td>@users.Person.Name</td>
                        <td>@users.SelectEcoStatusType</td>
                        <td>@users.Email</td>
                        <td>@users.Account.CreationDate.ToShortDateString()</td>
                        <td>@users.EcoWallet.EcoCoinsAmount</td>
                        <td>@(users.EcoWallet.Subscription ? "En cours":"Aucun")</td>
                        <td>@(users.Account.IsActive ? "Actif":"Désactivé")</td>
                        <td><a href="/Account/UserProfilePersonalByAdmin/@users.Id"><span class="glyphicon glyphicon-info-sign  text-success"></span></a></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<br />
<div class="container-fluid bg-grey">
    @*Services list display without requests*@
    <div class="table-responsive">
        <p style="float:left;font-variant:small-caps;font-weight:bold;font-size:larger">Prestations proposées</p><input style="width:50%;float:right" type="text" id="searchServiceNoRequestInput" onkeyup="myFunctionNoRequest()" placeholder="Rechercher une prestation">
        <table class="table" id="serviceTableIsRequestFalse">
            <thead>

                <tr class="header">
                    <th>Date de début</th>
                    <th>Type de service</th>
                    <th>Numéro de réference</th>
                    <th>EcoMembre prestataire</th>
                    <th>EcoPrix</th>
                    <th>Statut</th>
                    <th>Supprimer</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var carPoolingService in Model.CarPoolingServices.Where(c => c.Service.IsRequest == false))
                {
                    <tr>
                        <td>@carPoolingService.Service.Start.ToShortDateString()</td>
                        <td>@carPoolingService.Service.SelectServiceType</td>
                        <td>@carPoolingService.Service.ReferenceNumber</td>
                        @foreach (var user in Model.Users.Where(u => u.Id == carPoolingService.Service.UserProviderId))
                        {
                            <td><a href="/Account/UserProfilePersonalByAdmin/@user.Id">@user.Account.Username</a></td>
                        }
                        <td>@carPoolingService.Service.PriceEcoCoins</td>
                        <td>@(carPoolingService.Service.IsAvailable ? "Disponible":"Terminé")</td>
                        <td><a href="/Service/AdminViewCarPoolingService/@carPoolingService.Id">Détails</a></td>

                    </tr>
                }
                @foreach (var carRentalService in Model.CarRentalServices.Where(c => c.Service.IsRequest == false))
                {
                    <tr>
                        <td>@carRentalService.Service.Start.ToShortDateString()</td>
                        <td>@carRentalService.Service.SelectServiceType</td>
                        <td>@carRentalService.Service.ReferenceNumber</td>
                        @foreach (var user in Model.Users.Where(u => u.Id == carRentalService.Service.UserProviderId))
                        {
                            <td><a href="/Account/UserProfilePersonalByAdmin/@user.Id">@user.Account.Username</a></td>
                        }
                        <td>@carRentalService.Service.PriceEcoCoins</td>
                        <td>@(carRentalService.Service.IsAvailable ? "Disponible":"Terminé")</td>
                        <td><a href="/Service/AdminViewCarRentalService/@carRentalService.Id">Détails</a></td>

                    </tr>
                }
                @foreach (var parcelService in Model.ParcelServices.Where(c => c.Service.IsRequest == false))
                {
                    <tr>
                        <td>@parcelService.Service.Start.ToShortDateString()</td>
                        <td>@parcelService.Service.SelectServiceType</td>
                        <td>@parcelService.Service.ReferenceNumber</td>
                        @foreach (var user in Model.Users.Where(u => u.Id == parcelService.Service.UserProviderId))
                        {
                            <td><a href="/Account/UserProfilePersonalByAdmin/@user.Id">@user.Account.Username</a></td>
                        }
                        <td>@parcelService.Service.PriceEcoCoins</td>
                        <td>@(parcelService.Service.IsAvailable ? "Disponible":"Terminé")</td>
                        <td><a href="/Service/AdminViewParcelService/@parcelService.Id">Détails</a></td>

                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<br />
<div class="container-fluid bg-grey">
    @*Requests List Display*@
    <div class="table-responsive">
        <p style="float:left;font-variant:small-caps;font-weight:bold;font-size:larger">Prestations demandées</p><input style="width:50%;float:right" type="text" id="searchServiceIsRequestInput" onkeyup="myFunctionIsRequest()" placeholder="Rechercher une prestation">
        <table class="table" id="serviceTableIsRequestTrue">
            <thead>
                <tr class="header">
                    <th>Date de début</th>
                    <th>Type de service</th>
                    <th>Numéro de réference</th>
                    <th>EcoMembre prestataire</th>
                    <th>EcoPrix</th>
                    <th>Statut</th>
                    <th>Supprimer</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var carPoolingService in Model.CarPoolingServices.Where(c => c.Service.IsRequest == true))
                {
                    <tr>
                        <td>@carPoolingService.Service.Start.ToShortDateString()</td>
                        <td>@carPoolingService.Service.SelectServiceType</td>
                        <td>@carPoolingService.Service.ReferenceNumber</td>
                        @foreach (var user in Model.Users.Where(u => u.Id == carPoolingService.Service.UserProviderId))
                        {
                            <td><a href="/Account/UserProfilePersonalByAdmin/@user.Id">@user.Account.Username</a></td>
                        }
                        <td>@carPoolingService.Service.PriceEcoCoins</td>
                        <td>@(carPoolingService.Service.IsAvailable ? "Disponible":"Terminé")</td>
                        <td><a href="/Service/AdminViewCarPoolingService/@carPoolingService.Id">Détails</a></td>
                    </tr>
                }
                @foreach (var carRentalService in Model.CarRentalServices.Where(c => c.Service.IsRequest == true))
                {
                    <tr>
                        <td>@carRentalService.Service.Start.ToShortDateString()</td>
                        <td>@carRentalService.Service.SelectServiceType</td>
                        <td>@carRentalService.Service.ReferenceNumber</td>
                        @foreach (var user in Model.Users.Where(u => u.Id == carRentalService.Service.UserProviderId))
                        {
                            <td><a href="/Account/UserProfilePersonalByAdmin/@user.Id">@user.Account.Username</a></td>
                        }
                        <td>@carRentalService.Service.PriceEcoCoins</td>
                        <td>@(carRentalService.Service.IsAvailable ? "Disponible":"Terminé")</td>
                        <td><a href="/Service/AdminViewCarRentalService/@carRentalService.Id">Détails</a></td>
                    </tr>
                }
                @foreach (var parcelService in Model.ParcelServices.Where(c => c.Service.IsRequest == true))
                {
                    <tr>
                        <td>@parcelService.Service.Start.ToShortDateString()</td>
                        <td>@parcelService.Service.SelectServiceType</td>
                        <td>@parcelService.Service.ReferenceNumber</td>
                        @foreach (var user in Model.Users.Where(u => u.Id == parcelService.Service.UserProviderId))
                        {
                            <td><a href="/Account/UserProfilePersonalByAdmin/@user.Id">@user.Account.Username</a></td>
                        }
                        <td>@parcelService.Service.PriceEcoCoins</td>
                        <td>@(parcelService.Service.IsAvailable ? "Disponible":"Terminé")</td>
                        <td><a href="/Service/AdminViewParcelService/@parcelService.Id">Détails</a></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<br />
<div class="container-fluid bg-grey">
    @*Purchases List Display*@
    <div class="table-responsive">
        <p style="float:left;font-variant:small-caps;font-weight:bold;font-size:larger">EcoStore</p><input style="width:50%;float:right" type="text" id="searchInvoice" onkeyup="searchInvoice()" placeholder="Rechercher un achat">
        <table class="table" id="userInvoices">
            <thead>
                <tr class="header">
                    <th>Date d'achat</th>
                    <th>Type d'achat</th>
                    <th>Numéro de Facture</th>
                    <th>Utilisateur concerné</th>
                    <th>Détails</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ecoStoreInvoice in Model.EcoStoreInvoices)
                {
                    <tr>
                        <td>@ecoStoreInvoice.Invoice.InvoiceIssueDate.ToShortDateString()</td>
                        <td>@ecoStoreInvoice.Invoice.SelectInvoiceType</td>
                        <td>@ecoStoreInvoice.Invoice.InvoiceNumber</td>
                        <td>@ecoStoreInvoice.UserId</td>
                        <td><a href="/Financial/EcoStoreInvoice/@ecoStoreInvoice.Id"><span class="glyphicon glyphicon-info-sign  text-success"></span></a></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<br />

<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-sm-6 col-md-8">
            <canvas class="bar-chart" id="myChart2"></canvas>
        </div>
        <div class="col-6 col-md-4">
            <canvas class="pie-chart" id="myChart"></canvas>
        </div>
    </div>
</div>

<script>
    function myFunctionUser() {
        var input, filter, table, tr, td, cell, i, j;
        filter = document.getElementById("searchUserInput").value.toLowerCase();
        table = document.getElementById("userTable");
        tr = table.getElementsByTagName("tr");
        for (i = 1; i < tr.length; i++) {
            tr[i].style.display = "none";
            const tdArray = tr[i].getElementsByTagName("td");
            for (var j = 0; j < tdArray.length; j++) {
                const cellValue = tdArray[j];
                if (cellValue && cellValue.innerHTML.toLowerCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                    break;
                }
            }
        }
    }
</script>
<script>
    function myFunctionNoRequest() {
        var input, filter, table, tr, td, cell, i, j;
        filter = document.getElementById("searchServiceNoRequestInput").value.toLowerCase();
        table = document.getElementById("serviceTableIsRequestFalse");
        tr = table.getElementsByTagName("tr");
        for (i = 1; i < tr.length; i++) {
            tr[i].style.display = "none";
            const tdArray = tr[i].getElementsByTagName("td");
            for (var j = 0; j < tdArray.length; j++) {
                const cellValue = tdArray[j];
                if (cellValue && cellValue.innerHTML.toLowerCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                    break;
                }
            }
        }
    }
</script>
<script>
    function myFunctionIsRequest() {
        var input, filter, table, tr, td, cell, i, j;
        filter = document.getElementById("searchServiceIsRequestInput").value.toLowerCase();
        table = document.getElementById("serviceTableIsRequestTrue");
        tr = table.getElementsByTagName("tr");
        for (i = 1; i < tr.length; i++) {
            tr[i].style.display = "none";
            const tdArray = tr[i].getElementsByTagName("td");
            for (var j = 0; j < tdArray.length; j++) {
                const cellValue = tdArray[j];
                if (cellValue && cellValue.innerHTML.toLowerCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                    break;
                }
            }
        }
    }
</script>
<script>
    function searchInvoice() {
        var input, filter, table, tr, td, cell, i, j;
        filter = document.getElementById("searchInvoice").value.toLowerCase();
        table = document.getElementById("userInvoices");
        tr = table.getElementsByTagName("tr");
        for (i = 1; i < tr.length; i++) {
            tr[i].style.display = "none";
            const tdArray = tr[i].getElementsByTagName("td");
            for (var j = 0; j < tdArray.length; j++) {
                const cellValue = tdArray[j];
                if (cellValue && cellValue.innerHTML.toLowerCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                    break;
                }
            }
        }
    }
</script>

<script>
    var xValues = ["EcoMembres", "Achats EcoStore"];
    var yValues = [@Model.Users.Count(), @Model.EcoStoreInvoices.Count()];
    var barColors = ["#3e6a3e", "#93bb83"];

    new Chart("myChart2", {
        type: "bar",
        data: {
            labels: xValues,
            datasets: [{
                backgroundColor: barColors,
                data: yValues
            }]
        },
        options: {
            legend: { display: false },
            title: {
                display: true,
                text: "Evolution des EcoMembres et leurs EcoAchats"
            },
            scales: {
                xAxes: [{ ticks: { min: 0, max: 20 } }]
            }
        }
    });
</script>


<script>
    var xValues = ["Propositions", "Demandes"];
    var yValues = [@Model.Services.Where(s=>s.IsRequest==false).Count(), @Model.Services.Where(s=>s.IsRequest==true).Count()];
    var barColors = [
        "#3e6a3e",
        "#93bb83",
    ];

    new Chart("myChart", {
        type: "pie",
        data: {
            labels: xValues,
            datasets: [{
                backgroundColor: barColors,
                data: yValues
            }]
        },
        options: {
            title: {
                display: true,
                text: "Propositions vs Demandes"
            }
        }
    });
</script>
